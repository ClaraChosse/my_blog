renv::status()
install.packages("quarto")
install.packages("targets")
renv::status()
renv::init()
renv::status()
install.packages("remotes")
remotes::install_github("ClaraChosse/heron")
Pour installer ce package, nous pouvons utiliser les commandes suivantes dans la console R studio :
usethis::use_r("fonctions")
library(usethis)
install.packages("usethis")
library(usethis)
divide_triangle <- function(A, B, C) {
# Calculer les coordonnées des points moyens
mid_AB <- (A + B)/2
mid_BC <- (B + C)/2
mid_CA <- (C + A)/2
# Découper le triangle en 4 triangles
triangle1 <- c(A, mid_AB, mid_CA)
triangle2 <- c(mid_AB, B, mid_BC)
triangle3 <- c(mid_BC, C, mid_CA)
# Retirer le triangle intérieur
triangles <- list(triangle1, triangle2, triangle3)
return(triangles)
}
divide_triangle(3,4,5)
divide_list_triangle <- function(triangle_list, divide_triangle) {
new_list_triangle <- list()
for (triangle in triangle_list) {
divided_triangles <- divide_triangle(triangle[1, ], triangle[2, ], triangle[3, ])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
divide_list_triangle(triangle_list(2,3,4),2,3,4)
divide_list_triangle(triangle_list(2,3,4),2)
divide_triangle <- function(A, B, C) {
# Calculer les coordonnées des points moyens
mid_AB <- (A + B)/2
mid_BC <- (B + C)/2
mid_CA <- (C + A)/2
# Découper le triangle en 4 triangles
triangle1 <- c(A, mid_AB, mid_CA)
triangle2 <- c(mid_AB, B, mid_BC)
triangle3 <- c(mid_BC, C, mid_CA)
# Retirer le triangle intérieur
triangles <- list(triangle1, triangle2, triangle3)
return(triangles)
}
divide_list_triangle <- function(triangle_list, divide_triangle) {
new_list_triangle <- list()
for (triangle in triangle_list) {
divided_triangles <- divide_triangle(triangle[1, ], triangle[2, ], triangle[3, ])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
divide_list_triangle(triangle_list(2,3,4),2)
divide_list_triangle(2,triangle_list(2,3,4)
divide_list_triangle(2,triangle_list(2,3,4))
divide_list_triangle <- function(triangle_list, divide_triangle) {
new_list_triangle <- list()
for (triangle in triangle_list) {
divided_triangles <- divide_triangle(triangle[1, ], triangle[2, ], triangle[3, ])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
divide_list_triangle <- function(divide_triangle) {
new_list_triangle <- list()
for (triangle in triangle_list) {
divided_triangles <- divide_triangle(triangle[1, ], triangle[2, ], triangle[3, ])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
divide_list_triangle <- function(divide_triangle) {
new_list_triangle <- list()
for (triangle in divide_triangle) {
divided_triangles <- divide_triangle(triangle[1, ], triangle[2, ], triangle[3, ])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
remotes::install_github("ClaraChosse/heron")
remotes::install_github(« ClaraChosse/heron@master")
remotes::install_github("ClaraChosse/heron@master")
renv::snapshot()
library(renv)
remotes::install_github("ClaraChosse/heron@master")
tar_script("_targets.R", script = "posts/post-with-code/")
library(targets)
install.packages("targets")
tar_script("_targets.R", script = "posts/post-with-code/")
library(targets)
tar_script("_targets.R", script = "posts/post-with-code/")
tar_script("_targets.R", script = "posts/post-with-code/")
tar_script("_targets.R", script = "posts/post-with-code/")
tar_script("_targets.R", script = "posts/post-with-code/")
tar_script("posts/post-with-code/_targets.R", script = "posts/post-with-code/")
tar_script("_targets.R", script = "posts/post-with-code/")
tar_script("posts/post-with-code/_targets.R", script = "posts/post-with-code/")
install.packages(targets)
install.packages("targets")
tar_script("posts/post-with-code/_targets.R", script = "posts/post-with-code/")
tar_script("posts/post-with-code/_targets.R")
setwd("~/Documents/FAC/S2 ECAP/r/my_blog")
tar_script("~/Documents/FAC/S2 ECAP/r/my_blog/posts/post-with-code/_targets.R", script = "~/Documents/FAC/S2 ECAP/r/my_blog/posts/post-with-code/")
file.rename(from = "chemin/fichier_actuel", to = "chemin/dossier_destination/nouveau_nom")
tar_config_set("script", "posts/post-with-code/_targets.R")
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
# Créer la liste des points d'origine
points <- list(
A = c(0, 0),
B = c(0, 1),
C = c(0.5, sqrt(3)/2)
)
# Créer la première cible pour la première itération
tar_target(
name = "iteration_1",
command = {
triangles <- divide_triangle(points$A, points$B, points$C)
divide_list_triangle(triangles)
}
)
# Créer des cibles pour les itérations suivantes
for (i in 2:4) {
previous_target <- paste0("iteration_", i - 1)
current_target <- paste0("iteration_", i)
tar_target(
name = current_target,
command = {
previous_triangles <- tar_read(previous_target)
divide_list_triangle(previous_triangles)
}
)
}
# Créer une cible finale pour visualiser les triangles de la dernière itération
tar_target(
name = "final_triangles",
command = {
last_triangles <- tar_read("iteration_4")
# Ajoutez ici le code pour visualiser les triangles
}
)
plot_triangles <- function(triangles) {
# Définir les couleurs pour chaque triangle
colors <- c("red", "blue", "green", "orange", "purple", "brown", "pink", "gray", "black", "yellow")
# Tracer chaque triangle avec une couleur différente
for (i in 1:length(triangles)) {
points <- triangles[[i]]
x <- c(points[1], points[3], points[5], points[1])
y <- c(points[2], points[4], points[6], points[2])
polygon(x, y, col = colors[i])
}
}
plot_triangles
polygon
plot(polygon)
plot_triangles(points)
plot_triangles <- function(triangles) {
# Définir les couleurs pour chaque triangle
colors <- c("red", "blue", "green", "orange", "purple", "brown", "pink", "gray", "black", "yellow")
# Tracer chaque triangle avec une couleur différente
for (i in 1:length(triangles)) {
points <- triangles[[i]]
x <- c(points[1], points[3], points[5], points[1])
y <- c(points[2], points[4], points[6], points[2])
polygon(x, y, col = colors[i])
}
}
plot_triangles(points)
plot_triangles(triangles)
plot_triangles <- function(points) {
# Définir les couleurs pour chaque triangle
colors <- c("red", "blue", "green", "orange", "purple", "brown", "pink", "gray", "black", "yellow")
# Tracer chaque triangle avec une couleur différente
for (i in 1:length(triangles)) {
points <- triangles[[i]]
x <- c(points[1], points[3], points[5], points[1])
y <- c(points[2], points[4], points[6], points[2])
polygon(x, y, col = colors[i])
}
}
plot_triangles(points)
plot_triangles(points)
plot_triangles <- function(points) {
# Définir les couleurs pour chaque triangle
colors <- c("red", "blue", "green", "orange", "purple", "brown", "pink", "gray", "black", "yellow")
# Tracer chaque triangle avec une couleur différente
for (i in 1:length(points)) {
points <- triangles[[i]]
x <- c(points[1], points[3], points[5], points[1])
y <- c(points[2], points[4], points[6], points[2])
polygon(x, y, col = colors[i])
}
}
plot_triangles(points)
plot_triangles <- function(points) {
# Définir les couleurs pour chaque triangle
colors <- c("red", "blue", "green", "orange", "purple", "brown", "pink", "gray", "black", "yellow")
# Tracer chaque triangle avec une couleur différente
for (i in 1:length(points)) {
points <- points[[i]]
x <- c(points[1], points[3], points[5], points[1])
y <- c(points[2], points[4], points[6], points[2])
polygon(x, y, col = colors[i])
}
}
plot_triangles(points)
plot_triangles
targets:
triangles1:
command: divide_list_triangle(points)
plot_triangles <- function(triangles) {
# Initialiser une nouvelle figure
plot.new()
# Parcourir chaque triangle de la liste
for (triangle in triangles) {
# Extraire les coordonnées des sommets du triangle
x <- c(triangle[[1]], triangle[[3]], triangle[[5]], triangle[[1]])
y <- c(triangle[[2]], triangle[[4]], triangle[[6]], triangle[[2]])
# Tracer le triangle
lines(x, y)
}
}
plot_triangles(triangles)
# Points de coordonnées (0, 0), (0, 1), (0.5, 3/2)
points <- list(c(0, 0), c(0, 1), c(0.5, 3/2))
plot_triangles(points)
#' divide_triangle
#'
#'Cette fonction renvoie trois triangles issus de la première itération de Sierpiński
#'
#' @param A Le premier coté du triangle
#' @param B Le deuxième coté du triangle
#' @param C Le troisième coté du triangle
#'
#' @return
#' @export
#'
#' @examples
divide_triangle <- function(A, B, C) {
# Calculer les coordonnées des points moyens
mid_AB <- (A + B)/2
mid_BC <- (B + C)/2
mid_CA <- (C + A)/2
# Découper le triangle en 4 triangles
triangle1 <- c(A, mid_AB, mid_CA)
triangle2 <- c(mid_AB, B, mid_BC)
triangle3 <- c(mid_BC, C, mid_CA)
# Retirer le triangle intérieur
triangles <- list(triangle1, triangle2, triangle3)
return(triangles)
}
#' divide_list_triangle
#'
#' Cette fonction renvoie
#'
#' @param divide_triangle
#'
#' @return
#' @export
#'
#' @examples
divide_list_triangle <- function(divide_triangle) {
new_list_triangle <- list()
for (triangle in divide_triangle) {
divided_triangles <- divide_triangle(triangle[1, ], triangle[2, ], triangle[3, ])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
plot_triangles <- function(triangles) {
# Initialiser une nouvelle figure
plot.new()
# Parcourir chaque triangle de la liste
for (triangle in triangles) {
# Extraire les coordonnées des sommets du triangle
x <- c(triangle[[1]], triangle[[3]], triangle[[5]], triangle[[1]])
y <- c(triangle[[2]], triangle[[4]], triangle[[6]], triangle[[2]])
# Tracer le triangle
lines(x, y)
}
}
plot_triangles(triangles)
points <- list(c(0, 0), c(0, 1), c(0.5, 3/2))
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
triangles_iter2 <- divide_list_triangle(triangles_iter1)
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
triangles_iter2 <- divide_list_triangle(triangles_iter1)
points <- list(c(0, 0), c(0, 1), c(0.5, 3/2))
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
plot(triangles_iter1)
points <- list(c(0, 0), c(0, 1), c(0.5, 3/2))
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
triangles_iter2 <- divide_list_triangle(triangles_iter1)
triangles_iter3 <- divide_list_triangle(triangles_iter2)
triangles_iter4 <- divide_list_triangle(triangles_iter3)
triangles_iter2 <- divide_list_triangle(triangles_iter1)
#' divide_list_triangle
#'
#' Cette fonction renvoie
#'
#' @param divide_triangle
#'
#' @return
#' @export
#'
#' @examples
divide_list_triangle <- function(divide_triangle) {
new_list_triangle <- list()
for (triangle in divide_triangle) {
divided_triangles <- divide_triangle(triangle[[1]], triangle[[2]], triangle[[3]])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
points <- list(c(0, 0), c(0, 1), c(0.5, 3/2))
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
triangles_iter2 <- divide_list_triangle(triangles_iter1)
triangles_iter3 <- divide_list_triangle(triangles_iter2)
triangles_iter4 <- divide_list_triangle(triangles_iter3)
list_of_triangles <- list(triangles_iter1, triangles_iter2, triangles_iter3, triangles_iter4)
plot(list_of_triangles)
plot_triangles <- function(triangles) {
# Initialiser une nouvelle figure
plot.new()
# Parcourir chaque triangle de la liste
for (triangle in triangles) {
# Extraire les coordonnées des sommets du triangle
x <- c(triangle[[1]], triangle[[3]], triangle[[5]], triangle[[1]])
y <- c(triangle[[2]], triangle[[4]], triangle[[6]], triangle[[2]])
# Tracer le triangle
lines(x, y)
}
}
plot_triangles(triangles)
plot_triangles <- function(triangle_list) {
for (i in 1:length(triangle_list)) {
polygon(triangle_list[[i]], col = "gray", border = "black")
}
}
plot_triangles(divided_triangles)
plot_triangles(divide_list_triangle)
plot_triangles(new_list_triangle)
#' divide_list_triangle
#'
#' Cette fonction renvoie
#'
#' @param divide_triangle
#'
#' @return
#' @export
#'
#' @examples
divide_list_triangle <- function(divide_triangle) {
new_list_triangle <- list()
for (triangle in divide_triangle) {
divided_triangles <- divide_triangle(triangle[[1]], triangle[[2]], triangle[[3]])
new_list_triangle <- c(new_list_triangle, divided_triangles)
}
return(new_list_triangle)
}
plot_triangles(new_list_triangle)
plot_triangles <- function(triangle_list) {
for (i in 1:length(triangle_list)) {
polygon(triangle_list[[i]], col = "gray", border = "black")
}
}
plot_triangles <- function(new_list_triangle) {
for (i in 1:length(triangle_list)) {
polygon(triangle_list[[i]], col = "gray", border = "black")
}
}
plot_triangles(new_list_triangle)
plot_triangles <- function(new_list_triangle) {
for (i in 1:length(new_list_triangle)) {
polygon(new_list_triangle[[i]], col = "gray", border = "black")
}
}
plot_triangles(new_list_triangle)
# Exécuter quatre itérations de divide_list_triangle
triangles <- list(do.call(c, points))
for (i in 1:4) {
triangles <- divide_list_triangle(triangles)
}
# Tracer les triangles
plot_triangles(triangles)
triangles <- list(do.call(c, points))
for (i in 1:4) {
triangles <- divide_list_triangle(triangles)
}
# Tracer les triangles
plot_triangles(triangles)
# Définir les points initiaux
points <- list(c(0, 0), c(0, 1), c(0.5, 3/2))
# Exécuter quatre itérations de divide_list_triangle
triangles <- list(do.call(c, points))
for (i in 1:4) {
triangles <- divide_list_triangle(triangles)
}
# Tracer les triangles
plot_triangles(triangles)
# Tracer les triangles
plot_triangles(triangles_iter1)
# Créer la première cible pour la première itération
tar_target(
name = "iteration_1",
command = {
divide_list_triangle <- divide_triangle(points)
}
)
# Tracer les triangles
plot_triangles(points)
# Créer la première cible pour la première itération
tar_target(
name = "iteration_1",
command = {
triangles <- divide_triangle(points)
divide_list_triangle(triangles)
}
)
# Créer des cibles pour les itérations suivantes
for (i in 2:4) {
previous_target <- paste0("iteration_", i - 1)
current_target <- paste0("iteration_", i)
tar_target(
name = current_target,
command = {
previous_triangles <- tar_read(previous_target)
divide_list_triangle(previous_triangles)
}
)
}
# Créer une cible finale pour visualiser les triangles de la dernière itération
tar_target(
name = "final_triangles",
command = {
last_triangles <- tar_read("iteration_4")
# Ajoutez ici le code pour visualiser les triangles
}
)
plot_triangles <- function(triangles) {
# Initialiser une nouvelle figure
plot.new()
# Parcourir chaque triangle de la liste
for (triangle in triangles) {
# Extraire les coordonnées des sommets du triangle
x <- c(triangle[[1]], triangle[[3]], triangle[[5]], triangle[[1]])
y <- c(triangle[[2]], triangle[[4]], triangle[[6]], triangle[[2]])
# Tracer le triangle
lines(x, y)
}
}
plot_triangles(triangles)
plot_triangles(points)
plot_triangles(triangles_iter4)
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
plot_triangles(triangles_iter1)
# Points de coordonnées (0, 0), (0, 1), (0.5, 3/2)
points <- list(c(0, 0), c(0, 1), c(0.5, sqrt(3)/2))
triangles_iter1 <- divide_triangle(points[[1]], points[[2]], points[[3]])
plot_triangles(triangles_iter1)
triangles_iter2 <- divide_list_triangle(triangles_iter1)
plot_triangles(triangles_iter2)
# Découper le triangle en 4 triangles
triangle1 <- c(A, mid_AB, mid_CA)
# Points de coordonnées (0, 0), (0, 1), (0.5, 3/2)
points <- list(c(0, 0), c(0, 1), c(0.5, sqrt(3)/2))
plot(divide_triangle(points))
# Points de coordonnées (0, 0), (0, 1), (0.5, 3/2)
points <- list(c(0, 0), c(0, 1), c(0.5, sqrt(3)/2))
plot(divide_triangle(points))
points <- list(A(0, 0), B(0, 1), C(0.5, 1.5))
points <- list(
A(A(0, 0)),
B(0, 1),
C(0.5, 1.5))
points <- list(
c(A(0, 0)),
B(0, 1),
C(0.5, 1.5))
# Définir les points A, B, C
A <- c(0, 0)
B <- c(0, 1)
C <- c(0.5, 1.5)
# Créer une liste avec les points
points <- list(A, B, C)
plot(divide_triangle(points))
# Tracer le triangle initial
plot(points, type = "n")
polygon(points)
# Créer une liste avec les points
points <- list(A, B, C)
# Tracer le triangle initial
plot(points, type = "n")
# Set target options:
tar_option_set(
format = "rds"
)
options(clustermq.scheduler = "multicore")
# Set target options:
tar_option_set(
format = "rds"
)
options(clustermq.scheduler = "multicore")
tar_source()
